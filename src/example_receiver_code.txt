#include <esp_now.h>
#include <WiFi.h>

// Must match the sender structure
typedef struct struct_message {
  int joyX;
  int joyY;
  char buttonState;
  char checksum;
} struct_message;

struct_message data;

// callback function that will be executed when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&data, incomingData, sizeof(data));
  Serial.print(millis());
  Serial.print(":   joyX: ");
  Serial.print(data.joyX);
  Serial.print(",  joyY: ");
  Serial.print(data.joyY);
  Serial.print(",  buttonState: ");
  Serial.print((data.buttonState&0b10000000)==0b10000000);
  Serial.print((data.buttonState&0b01000000)==0b01000000);
  Serial.print((data.buttonState&0b00100000)==0b00100000);
  Serial.print((data.buttonState&0b00010000)==0b00010000);
  Serial.print((data.buttonState&0b00001000)==0b00001000);
  Serial.print((data.buttonState&0b00000100)==0b00000100);
//  Serial.println(data.buttonState);
  Serial.print(",  checksum received: ");
  Serial.print(data.checksum, BIN);
  char XHB = (char)highByte(data.joyX);
  char XLB = (char)lowByte(data.joyX);
  char YHB = (char)highByte(data.joyY);
  char YLB = (char)lowByte(data.joyY);

  char checksum_calc = data.buttonState ^ XHB ^ XLB ^ YHB ^ YLB;
  Serial.print(",  checksum calculated: ");
  Serial.print(checksum_calc, BIN);
  Serial.println(data.checksum == checksum_calc ? ", Checksum Matches" : ", Checksum does not match");
}
 
void setup() {
  Serial.begin(115200);  
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  esp_now_register_recv_cb(OnDataRecv);
}
 
void loop() {}